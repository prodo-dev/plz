#!/usr/bin/env zsh

set -e
set -u
set -o err_return
set -o pipefail
setopt extended_glob

cd ${0:a:h:h}

source ./test/utils.sh

function start_controller {
  info "Building the controller..."
  docker image build --quiet --tag=$CONTROLLER_IMAGE services/controller

  if container_exists $CONTROLLER_CONTAINER; then
    warning "Controller already exists. Stopping..."
    stop_controller
  fi

  info "Starting the controller..."
  docker_compose up --quiet-pull --detach
}

function stop_controller {
  docker_compose stop
  docker_compose logs
  docker_compose down --volumes
}

function build_cli {
  info "Building the CLI..."
  docker image build --quiet --target=builder --tag=$CLI_BUILDER_IMAGE --file=cli/Dockerfile .
  docker image build --quiet --tag=$CLI_IMAGE --file=cli/Dockerfile .
}

function cleanup {
  exit_status=$?
  stop_all_clis
  stop_controller
  remove_all_volumes
  return $exit_status
}

function stop_all_clis {
  for container in $(docker container ls --quiet --all --filter=name="${CLI_CONTAINER_PREFIX}"); do
    stop_cli $container
  done
}

function stop_cli {
  if ! container_exists $1; then
    return
  fi
  docker container stop $1 > /dev/null || :
  docker container rm $1 > /dev/null || :
  info "CLI stopped."
}

function remove_all_volumes {
  for volume in $(docker volume ls --quiet --filter=name="${VOLUME_PREFIX}"); do
    remove_volume $volume
  done
}

function docker_compose {
  docker-compose \
  --project-name="$PROJECT_NAME" \
  --file="${TEST_DIRECTORY}/docker-compose.yml" \
  $@
}

# In "bless mode", instead of comparing the actual output against expected
# output, we save the output.
bless=false
# In "parallel mode", tests run in parallel.
parallel=false
while [[ $# -gt 0 ]]; do
  case $1 in
    --bless)
      bless=true
      shift ;;
    --parallel)
      parallel=true
      shift ;;
    *)
      break
  esac
done

if [[ $# -eq 0 ]]; then
  # Run all tests, except in directories named "*.ignored".
  tests=($((cd $TEST_DIRECTORY && echo */*/plz.config.json~*/*.ignored/*) \
             | xargs -n1 dirname))
else
  # Run selected tests.
  # But first, verify all arguments are actually test directories.
  for dir in $@; do
    if [[ ! ( $dir =~ '^[A-Za-z0-9\-]+/[A-Za-z0-9\-]+$' ) \
          || ! -f "${TEST_DIRECTORY}/${dir}/plz.config.json" ]]; then
      echo "\"${dir}\" is not a test directory."
      exit 2
    fi
  done
  tests=($@)
fi

exit_early=false
trap 'exit_early=true; cleanup' EXIT INT TERM

mkdir -p $DATA_DIRECTORY
build_cli

if (( ${+PLZ_HOST} )) && (( ${+PLZ_PORT} )); then
  NETWORK=host
else
  start_controller
  PLZ_HOST=$CONTROLLER_CONTAINER
  PLZ_PORT=$CONTROLLER_PORT
fi
export PLZ_HOST
export PLZ_PORT
export NETWORK

success_file=$(mktemp "${DATA_DIRECTORY}/plz-test-success.XXXXX")
pids=()
for test in $tests; do
  if $parallel; then
    (
      test_output=$("${TEST_DIRECTORY}/run-test" $test 2>&1) || rm -f $success_file
      echo $test_output
    ) &
    pids+=($!)
  else
    "${TEST_DIRECTORY}/run-test" $test || rm -f $success_file
    if $exit_early; then
      rm -f $success_file
      break
    fi
  fi
done

if $parallel; then
  for pid in $pids; do
    wait $pid
    if $exit_early; then
      rm -f $success_file
      break
    fi
  done
fi

echo
[[ -e $success_file ]]
