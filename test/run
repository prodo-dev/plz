#!/usr/bin/env zsh

set -e
set -u
set -o pipefail

autoload -U colors && colors

NETWORK=plz-test
VOLUME=plz-data
VOLUME_CONTAINER=plz-data
CLI_IMAGE=plz-cli-test
CLI_CONTAINER=plz-cli-test
CONTROLLER_IMAGE=plz-controller-test
CONTROLLER_CONTAINER=plz-controller-test
CONTROLLER_PORT=8080
TEST_DIRECTORY=${0:a:h}
DATA_DIRECTORY="${PWD}/cache/test"

cd ${0:a:h:h}

mkdir -p $DATA_DIRECTORY

if [[ -t 1 ]]; then
  function info {
    echo "${fg[green]}>${reset_color} $@"
  }
  function warning {
    echo "${fg[yellow]}>${reset_color} $@"
  }
  function error {
    echo "${fg[red]}>${reset_color} $@"
  }
else
  function info {
    echo > $@
  }
  function warning {
    echo > $@
  }
  function error {
    echo > $@
  }
fi

# In "bless mode", instead of comparing the actual output against expected
# output, we save the output.
bless=false
if [[ $# -gt 0 && $1 == '--bless' ]]; then
  bless=true
  shift
fi

if [[ $# -eq 0 ]]; then
  # Run all tests.
  tests=($(find $TEST_DIRECTORY -mindepth 1 -maxdepth 1 -type d -not -name '*.ignored' | sort))
else
  # Run selected tests.
  # But first, verify all arguments are actually test directories.
  for dir in $@; do
    if [[ ${dir:a} != "${TEST_DIRECTORY}/${dir:t}" ]]; then
      echo "\"${dir}\" is not a test directory."
      exit 2
    fi
  done
  tests=($@)
fi

function start_controller {
  docker network inspect $NETWORK >& /dev/null \
    || docker network create $NETWORK

  info "Building the controller..."
  docker image build --quiet --tag=$CONTROLLER_IMAGE services/controller

  if controller_running; then
    warning "Controller already exists. Stopping..."
    stop_controller
  fi

  info "Starting the controller..."
  docker container run \
    --name=$CONTROLLER_CONTAINER \
    --detach \
    --network=$NETWORK \
    --env=PORT=$CONTROLLER_PORT \
    --env=AWS_DEFAULT_REGION=eu-west-1 \
    --volume="${PWD}/cache/controller:/cache/controller" \
    --volume=/var/run/docker.sock:/var/run/docker.sock \
    $CONTROLLER_IMAGE \
    --run-executions-locally \
    --environment-name=ignore --data-dir=/cache/controller --aws-project=ignore --aws-worker-ami=ignore --aws-key-name=ignore
  sleep 5
  info "Controller started."
}

function stop_controller {
  if ! controller_running; then
    return
  fi
  docker container stop $CONTROLLER_CONTAINER > /dev/null || :
  info "Controller logs:"
  docker container logs $CONTROLLER_CONTAINER || :
  docker container rm $CONTROLLER_CONTAINER > /dev/null || :
  info "Controller stopped."
}

function controller_running {
  docker container inspect $CONTROLLER_CONTAINER >& /dev/null
}

function build_cli {
  info "Building the CLI..."
  docker image build --quiet --tag=$CLI_IMAGE cli
}

function run_cli {
  if cli_running; then
    warning "CLI container already exists. Stopping..."
    stop_cli
  fi

  if volume_exists; then
    warning "Volume already exists. Stopping..."
    remove_volume
  fi

  app_directory=${1:a}
  logs_file=${2:a}
  output_directory=${3:a}

  # Add the app directory to a Docker volume.
  docker volume create $VOLUME > /dev/null
  docker create \
    --name=$VOLUME_CONTAINER \
    --volume=$VOLUME:/data \
    docker:stable-git \
    /bin/true \
    > /dev/null
  docker container cp $app_directory $VOLUME_CONTAINER:/data/app

  # Initialize a Git repository to make excludes work.
  docker container run \
    --rm \
    --volume=$VOLUME:/data \
    docker:stable-git \
    git init --quiet /data/app

  # Start the CLI process.
  docker container run \
    --name=$CLI_CONTAINER \
    --detach \
    --network=$NETWORK \
    --env=PLZ_HOST=$CONTROLLER_CONTAINER \
    --env=PLZ_PORT=$CONTROLLER_PORT \
    --env=PLZ_QUIET_BUILD=true \
    --workdir=/data/app \
    --volume="${VOLUME}:/data" \
    $CLI_IMAGE \
    run --output="/data/output" \
    > /dev/null

  # Capture the logs and exit status.
  docker container logs --follow $CLI_CONTAINER |& redact_uuids | tee $logs_file
  exit_status=$(docker wait $CLI_CONTAINER)
  docker container rm $CLI_CONTAINER > /dev/null

  # Extract the output.
  docker container cp $VOLUME_CONTAINER:/data/output $output_directory
  remove_volume

  return $exit_status
}

function stop_cli {
  if ! cli_running; then
    return
  fi
  docker container stop $CLI_CONTAINER > /dev/null || :
  docker container rm $CLI_CONTAINER > /dev/null || :
  info "CLI stopped."
}

function cli_running {
  docker container inspect $CLI_CONTAINER >& /dev/null
}

function cleanup {
  exit_status=$?
  stop_controller
  stop_cli
  remove_volume
  docker network rm $NETWORK > /dev/null || :
  return $exit_status
}

function remove_volume {
  if ! volume_exists; then
    return
  fi
  docker container rm $VOLUME_CONTAINER > /dev/null || :
  docker volume rm $VOLUME > /dev/null || :
}

function volume_exists {
  docker container inspect $VOLUME_CONTAINER >& /dev/null \
    || docker volume inspect $VOLUME >& /dev/null
}

function redact_uuids {
  sed 's/[0-9a-f]\{8\}-[0-9a-f]\{4\}-[0-9a-f]\{4\}-[0-9a-f]\{4\}-[0-9a-f]\{12\}/<UUID>/'
}

build_cli
start_controller
trap cleanup EXIT INT TERM

success=true
for test in $tests; do
  test=${test:a}
  echo
  info "Running ${test:t}..."

  if [[ -f "${test}/expected-status" ]]; then
    expected_exit_status=$(cat "${test}/expected-status")
  else
    expected_exit_status=0
  fi
  expected_logs="${test}/expected-logs"
  actual_logs=$(mktemp "${DATA_DIRECTORY}/plz-test-logs.XXXXX")
  expected_output_directory="${test}/expected-output"
  actual_output_directory=$(mktemp "${DATA_DIRECTORY}/plz-test-output.XXXXX")
  rm $actual_output_directory # It's been created as a file.

  set +e
  run_cli $test $actual_logs $actual_output_directory
  actual_exit_status=$?
  set -e

  if $bless; then
    if [[ $actual_exit_status -eq $expected_exit_status ]]; then
      info "Blessing output..."
      cp $actual_logs $expected_logs
      rm -rf $expected_output_directory
      if [[ -e $actual_output_directory ]]; then
        cp -R $actual_output_directory $expected_output_directory
      fi
      info 'Test blessed.'
    else
      error "Exited with a status code of ${actual_exit_status}."
      success=false
    fi
  else
    if [[ $actual_exit_status -ne $expected_exit_status ]]; then
      success=false
      error "Exited with a status code of ${actual_exit_status}."
      error "Expected a status code of ${expected_exit_status}."
      error 'Test failed.'
    else
      info "Comparing output..."
      if git diff --no-index $expected_logs $actual_logs && \
         ( ! [[ -e $expected_output_directory ]] || \
           git diff --no-index $expected_output_directory $actual_output_directory ); then
        info 'Test passed.'
      else
        success=false
        error 'Test failed.'
      fi
    fi
  fi
done

echo
$success
